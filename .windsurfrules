此脚本针对客户语音交互系统开发，使用 Go Gin 框架处理后端逻辑，
确保代码结构清晰、职责明确、可维护性强，遵循严格的开发规范和最佳实践。
创建方法的时候先检测是否已经存在，除非必要尽量不要创建文件
对接科大讯飞参考demo：\demo\iat_ws_go_demo\iat_ws_go_demo.go官方文档https://www.xfyun.cn/doc/asr/voicedictation/API.html
单项测试科大讯飞asr识别的时候用demo\iat_ws_go_demo\16k_10.pcm音频文件，要和demo对比下处理的速度，效率要比它高
对接free switch参考python的demo:demo\test.py
对接asr客户端参考客户端源码demo\mod_whisper
=========================================================
-------------------- 项目分层规则 --------------------
项目采用分层架构，清晰隔离不同功能代码，提高代码复用性和可维护性。
1. cmd/ 目录规则
存放项目入口文件，如 main.go，负责初始化配置、服务和启动 Gin 应用，无业务逻辑。
需完成配置加载、Gin 引擎创建、中间件注册、路由设置及服务器启动。
cmd/ {
files: ["main.go"],
responsibility: "初始化配置、服务和启动 Gin 应用，不包含业务逻辑"
}
2. internal/ 目录规则
存放内部实现代码，保障代码封装性和安全性，按功能模块细分。
internal/ {
2.1 config/ 子目录规则
加载解析配置文件（如 config.yaml），支持动态更新和热加载。
config.go 负责具体加载解析，types.go 定义配置结构体。
config/ {
files: ["config.go", "types.go"],
responsibility: "加载和解析配置文件，定义配置结构体，逻辑独立于业务"
}
2.2 handlers/ 子目录规则
存放 Gin 的 HTTP 路由处理器和 WebSocket 处理器。
每个处理器文件对应一个路由或功能模块，如 audio_handler.go 处理音频相关请求。
仅接收请求、调用服务层逻辑并返回响应，遵循 Gin 上下文处理规范。
handlers/ {
file_pattern: "/handler.go",
responsibility: "接收请求、调用服务层逻辑并返回响应，无业务逻辑，遵循 Gin 上下文处理规范"
}
2.3 clients/ 子目录规则
存放与外部系统的客户端封装，如 FreeSWITCH、科大讯飞 ASR、Ollama、微软 Edge TTS 等。
每个客户端文件对应一个外部系统，如 freeswitch_ws.go 处理 FreeSWITCH 连接。
客户端封装独立、可复用，避免硬编码依赖。
clients/ {
file_pattern: "/client.go",
responsibility: "封装与外部系统的交互，独立可复用，无硬编码依赖"
}
2.4 services/ 子目录规则
存放业务逻辑实现，按业务实体划分文件，如 services/user.go 处理用户相关业务逻辑。
负责具体业务逻辑，如调用第三方 API、处理数据等。
services/ {
file_pattern: "*/.go",
responsibility: "实现具体业务逻辑，按业务实体划分文件，调用客户端模块与外部系统交互"
}
2.5 models/ 子目录规则
存放数据模型定义，按业务实体划分文件，如 models/user.go 定义用户数据结构。
仅定义数据结构，不包含业务逻辑。
models/ {
file_pattern: "*/.go",
responsibility: "定义数据结构，无业务逻辑"
}
2.6 repositories/ 子目录规则
存放数据访问层代码，按业务实体划分文件，如 repositories/user.go 处理用户数据的增删改查。
repositories/ {
file_pattern: "*/.go",
responsibility: "实现数据持久化操作，按业务实体划分文件，与数据库或存储交互"
}
2.7 utils/ 子目录规则
存放工具函数，如 logger.go 实现日志记录。
工具函数应为纯函数，不依赖外部状态。
utils/ {
file_pattern: "/utils.go",
responsibility: "存放纯工具函数，不依赖外部状态"
}
2.8 middleware/ 子目录规则
存放 Gin 中间件，如 auth_middleware.go 实现认证逻辑。
独立于具体业务逻辑，负责通用请求处理，遵循 Gin 中间件编写规范。
middleware/ {
file_pattern: "/middleware.go",
responsibility: "实现通用请求处理中间件，独立于业务逻辑，遵循 Gin 中间件编写规范"
}
2.9 routes/ 子目录规则
存放路由相关的配置和逻辑文件，按业务实体或功能划分，如 route/agent.go、route/analysis.go 等。
负责集中管理和组织路由相关代码，便于维护和扩展。
routes/ {
file_pattern: "*/.go",
responsibility: "集中管理路由相关配置和逻辑，按业务实体或功能划分文件"
}
}
3. pkg/ 目录规则
存放可复用的通用模块，如 freeswitch/、websocket/ 等。
模块独立、通用，可在其他项目中复用。
pkg/ {
directory_pattern: "*/",
responsibility: "存放可复用的通用模块，独立可在其他项目复用"
}
4. test/ 目录规则
存放所有单元测试文件，按被测试的模块或文件结构进行组织，便于管理和维护。命名规则是测试项目名_测试方法名_test.go
test/ {
file_pattern: "/go",
responsibility: "存放单元测试代码，对各模块进行功能正确性验证"
}
-------------------- 模块职责划分规则 --------------------
明确各模块具体职责，确保代码分工清晰。
1. 配置管理
config/ {
responsibility: "加载和解析配置文件，支持动态更新，定义外部依赖配置"
}
2. HTTP 控制器
handlers/ {
responsibility: "接收 HTTP 请求，调用服务层逻辑，按功能模块划分处理器文件，使用 Gin 路由注册机制"
}
3. WebSocket 服务器
handlers/ws_handler.go {
responsibility: "处理 WebSocket 连接，接收音频流并转发给服务层，结合 Gin 和 WebSocket 库开发"
}
4. 外部系统客户端
clients/ {
responsibility: "与外部系统（FreeSWITCH、科大讯飞 ASR、Ollama、微软 Edge TTS 等）建立连接和交互"
}
5. 业务逻辑
services/ {
responsibility: "实现具体业务逻辑，按业务实体划分服务文件，调用客户端模块与外部系统交互，协调数据访问"
}
6. 数据模型
models/ {
responsibility: "定义数据结构，无业务逻辑"
}
7. 数据访问层
repositories/ {
responsibility: "实现数据持久化操作，按业务实体划分文件，与数据库或存储交互"
}
8. 工具函数
utils/ {
responsibility: "存放纯工具函数，不依赖外部状态"
}
9. 中间件
middleware/ {
responsibility: "实现通用请求处理中间件，独立于业务逻辑，遵循 Gin 中间件使用规范"
}
10. 路由管理
routes/ {
responsibility: "集中管理路由配置和逻辑，按业务实体或功能组织代码，与 handlers 协作完成请求路由"
}
11. 单元测试
test/ {
responsibility: "编写单元测试，覆盖各模块所有函数和逻辑分支，覆盖率达 80% 以上，使用 Gin 测试工具测试后端代码"
}
-------------------- 中文注释规范规则 --------------------
统一注释规范，提高代码可读性和可维护性。
1. 模块注释
每个文件开头添加模块功能简要说明。
示例：
// 文件：internal/clients/freeswitch/freeswitch_ws.go
// 功能：封装 FreeSWITCH 的 WebSocket 客户端，接收音频流并发送到服务器。
module_comment: {
format: "// 文件：{file_path}\n// 功能：{function_description}",
requirement: "每个文件开头添加模块功能简要说明"
}
2. 函数注释
每个函数上方添加注释，说明功能、参数和返回值。
示例：
// ConnectToFreeSWITCH 连接到 FreeSWITCH 服务器。
// 参数：host - FreeSWITCH 服务器地址；port - FreeSWITCH 服务器端口。
// 返回值：WebSocket 连接对象和可能的错误。
func ConnectToFreeSWITCH(host string, port int) (*websocket.Conn, error) {
function_comment: {
format: "// {function_name} {function_description}.\n// 参数：{parameters_description}.\n// 返回值：{return_value_description}.",
requirement: "每个函数上方添加功能、参数和返回值说明"
}
3. 重要逻辑注释
在代码逻辑复杂处添加注释，说明实现思路。
示例：
// 检查连接状态，如果断开则尝试重连。
if conn.IsClosed() {
conn, err = ConnectToFreeSWITCH(host, port)
if err!= nil {
log.Println ("重连失败:", err)
return
}
}
complex_logic_comment: {
requirement: "在代码逻辑复杂处添加实现思路说明"
}
4. 结构体注释
每个结构体字段添加注释，说明字段用途。
示例：
type FreeSWITCHConfig struct {
Host string // FreeSWITCH 服务器地址
Port int    // FreeSWITCH 服务器端口
}
struct_comment: {
format: "{field_name} {field_type} // {field_description}",
requirement: "每个结构体字段添加用途说明"
}
-------------------- 测试规范规则 --------------------
测试保证代码质量，明确测试规范提高代码稳定性。
1. 单元测试
单元测试文件统一放在根目录的 test 目录下，按被测试的模块或文件结构进行组织。
每个模块编写单元测试，确保功能正确性，覆盖所有函数和逻辑分支，测试覆盖率达 80% 以上。
对于 Gin 相关处理函数和中间件，使用 Gin 测试工具。
unit_test: {
location: "test/",
requirement: "每个模块编写单元测试，覆盖所有函数和逻辑分支，覆盖率 80% 以上，使用 Gin 测试工具测试后端代码"
}
2. 集成测试
编写集成测试，测试不同模块间交互和协作。
模拟实际业务场景，确保系统整体功能正常运行。
模拟 HTTP 请求和 WebSocket 连接。
integration_test: {
requirement: "编写集成测试，模拟实际业务场景，测试模块间交互协作，模拟 HTTP 请求和 WebSocket 连接"
}
3. 测试框架
使用 Go 语言的测试框架（如 testing）编写单元测试和集成测试。
编写清晰、易读的测试代码。
test_framework: {
backend_framework: "testing",
requirement: "使用 Go 的 testing 框架编写清晰易读测试代码"
}
-------------------- 依赖管理规则 --------------------
合理依赖管理确保项目稳定性和可重复性。
1. 依赖管理工具
使用 Go Modules 管理依赖，确保依赖版本一致性和可重复性。
dependency_management_tool: {
backend_tool: "Go Modules",
requirement: "使用 Go Modules 管理依赖，确保版本一致性和可重复性"
}
2. 依赖版本控制
在 go.mod 文件中明确指定依赖版本号，避免使用 latest 版本。
dependency_version_control: {
requirement: "在 go.mod 文件明确指定依赖版本号，避免使用 latest 版本"
}
-------------------- 日志管理规则 --------------------
良好日志管理有助于问题排查和系统监控。
1. 日志级别
支持 DEBUG、INFO、WARN、ERROR 等不同级别日志记录。
根据不同环境和需求调整日志级别。
log_level: {
levels: ["DEBUG", "INFO", "WARN", "ERROR"],
requirement: "支持多日志级别，可根据环境和需求调整"
}
2. 日志格式
采用结构化日志格式，如 JSON 格式，方便日志解析和分析。
log_format: {
format: "JSON",
requirement: "采用 JSON 结构化日志格式"
}
3. 日志存储
将日志存储到文件中，并定期进行日志清理和归档。
log_storage: {
storage_type: "file",
requirement: "日志存储到文件，定期清理和归档"
}
-------------------- 版本控制规则 --------------------
规范版本控制有助于项目管理和发布。
1. 版本号规范
使用语义化版本号（SemVer）进行项目版本管理，格式为 MAJOR.MINOR.PATCH。
version_numbering: {
format: "MAJOR.MINOR.PATCH",
requirement: "使用语义化版本号进行版本管理"
}
2. 版本发布流程
每次发布新版本时，更新 CHANGELOG 文件，记录版本变更内容和修复问题。
version_release: {
requirement: "每次发布新版本更新 CHANGELOG 文件，记录变更和修复问题"
}
-------------------- 避免重复定义和未定义错误规则 --------------------
1. 命名规范
为函数、变量、结构体等制定统一的命名规范，避免因命名随意导致的重复定义。
例如，函数名采用驼峰命名法，结构体名首字母大写等。
naming_convention: {
function: "驼峰命名法",
variable: "驼峰命名法",
struct: "首字母大写的驼峰命名法",
requirement: "遵循统一的命名规范，避免因命名随意导致重复定义"
}
2. 代码审查
在代码合并到主分支之前，进行严格的代码审查。
审查人员检查代码中是否存在重复定义和未定义的情况，并提出修改建议。
code_review: {
requirement: "代码合并到主分支前进行严格审查，检查重复定义和未定义问题并提出修改建议"
}
3. 静态代码分析
使用静态代码分析工具，如 Go 语言的 golint、govet、staticcheck。
在开发过程中定期运行这些工具，及时发现和解决重复定义和未定义的问题。
static_code_analysis: {
tools: ["golint", "govet", "staticcheck"],
requirement: "定期使用静态代码分析工具检查代码，及时发现和解决重复定义和未定义问题"
}